# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.action_mapping import ActionMapping  # noqa: F401,E501
from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.outgoing_callback_new import OutgoingCallbackNew  # noqa: F401,E501


class BidirectionalCallbackNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updates_action_mappings': 'list[ActionMapping]',
        'updates_enabled': 'bool',
        'bidirectional_callback_type': 'str'
    }

    attribute_map = {
        'updates_action_mappings': 'updatesActionMappings',
        'updates_enabled': 'updatesEnabled',
        'bidirectional_callback_type': 'bidirectional-callback-type'
    }

    def __init__(self, updates_action_mappings=None, updates_enabled=None, bidirectional_callback_type=None):  # noqa: E501
        """BidirectionalCallbackNew - a model defined in Swagger"""  # noqa: E501

        self._updates_action_mappings = None
        self._updates_enabled = None
        self._bidirectional_callback_type = None
        self.discriminator = None

        if updates_action_mappings is not None:
            self.updates_action_mappings = updates_action_mappings
        if updates_enabled is not None:
            self.updates_enabled = updates_enabled
        if bidirectional_callback_type is not None:
            self.bidirectional_callback_type = bidirectional_callback_type

    @property
    def updates_action_mappings(self):
        """Gets the updates_action_mappings of this BidirectionalCallbackNew.  # noqa: E501


        :return: The updates_action_mappings of this BidirectionalCallbackNew.  # noqa: E501
        :rtype: list[ActionMapping]
        """
        return self._updates_action_mappings

    @updates_action_mappings.setter
    def updates_action_mappings(self, updates_action_mappings):
        """Sets the updates_action_mappings of this BidirectionalCallbackNew.


        :param updates_action_mappings: The updates_action_mappings of this BidirectionalCallbackNew.  # noqa: E501
        :type: list[ActionMapping]
        """

        self._updates_action_mappings = updates_action_mappings

    @property
    def updates_enabled(self):
        """Gets the updates_enabled of this BidirectionalCallbackNew.  # noqa: E501


        :return: The updates_enabled of this BidirectionalCallbackNew.  # noqa: E501
        :rtype: bool
        """
        return self._updates_enabled

    @updates_enabled.setter
    def updates_enabled(self, updates_enabled):
        """Sets the updates_enabled of this BidirectionalCallbackNew.


        :param updates_enabled: The updates_enabled of this BidirectionalCallbackNew.  # noqa: E501
        :type: bool
        """

        self._updates_enabled = updates_enabled

    @property
    def bidirectional_callback_type(self):
        """Gets the bidirectional_callback_type of this BidirectionalCallbackNew.  # noqa: E501


        :return: The bidirectional_callback_type of this BidirectionalCallbackNew.  # noqa: E501
        :rtype: str
        """
        return self._bidirectional_callback_type

    @bidirectional_callback_type.setter
    def bidirectional_callback_type(self, bidirectional_callback_type):
        """Sets the bidirectional_callback_type of this BidirectionalCallbackNew.


        :param bidirectional_callback_type: The bidirectional_callback_type of this BidirectionalCallbackNew.  # noqa: E501
        :type: str
        """
        allowed_values = ["opsgenie-callback", "jira-callback", "jira-service-desk-callback", "service-now-callback", "kayako-callback", "ms-teams-callback", "op5-callback", "status-page-io-callback", "zendesk-callback"]  # noqa: E501
        if bidirectional_callback_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bidirectional_callback_type` ({0}), must be one of {1}"  # noqa: E501
                .format(bidirectional_callback_type, allowed_values)
            )

        self._bidirectional_callback_type = bidirectional_callback_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BidirectionalCallbackNew):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
