# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.user_address import UserAddress  # noqa: F401,E501
from opsgenie_swagger.models.user_contact import UserContact  # noqa: F401,E501
from opsgenie_swagger.models.user_role import UserRole  # noqa: F401,E501


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'username': 'str',
        'full_name': 'str',
        'role': 'UserRole',
        'skype_username': 'str',
        'time_zone': 'str',
        'locale': 'str',
        'user_address': 'UserAddress',
        'tags': 'list[str]',
        'details': 'dict(str, list[str])',
        'blocked': 'bool',
        'verified': 'bool',
        'created_at': 'datetime',
        'muted_until': 'datetime',
        'user_contacts': 'list[UserContact]'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'full_name': 'fullName',
        'role': 'role',
        'skype_username': 'skypeUsername',
        'time_zone': 'timeZone',
        'locale': 'locale',
        'user_address': 'userAddress',
        'tags': 'tags',
        'details': 'details',
        'blocked': 'blocked',
        'verified': 'verified',
        'created_at': 'createdAt',
        'muted_until': 'mutedUntil',
        'user_contacts': 'userContacts'
    }

    def __init__(self, id=None, username=None, full_name=None, role=None, skype_username=None, time_zone=None, locale=None, user_address=None, tags=None, details=None, blocked=None, verified=None, created_at=None, muted_until=None, user_contacts=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._username = None
        self._full_name = None
        self._role = None
        self._skype_username = None
        self._time_zone = None
        self._locale = None
        self._user_address = None
        self._tags = None
        self._details = None
        self._blocked = None
        self._verified = None
        self._created_at = None
        self._muted_until = None
        self._user_contacts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if full_name is not None:
            self.full_name = full_name
        if role is not None:
            self.role = role
        if skype_username is not None:
            self.skype_username = skype_username
        if time_zone is not None:
            self.time_zone = time_zone
        if locale is not None:
            self.locale = locale
        if user_address is not None:
            self.user_address = user_address
        if tags is not None:
            self.tags = tags
        if details is not None:
            self.details = details
        if blocked is not None:
            self.blocked = blocked
        if verified is not None:
            self.verified = verified
        if created_at is not None:
            self.created_at = created_at
        if muted_until is not None:
            self.muted_until = muted_until
        if user_contacts is not None:
            self.user_contacts = user_contacts

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501


        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.


        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501

        Role of user. It may be one of owner, admin, user or the name of a custom role you've created.  # noqa: E501

        :return: The role of this User.  # noqa: E501
        :rtype: UserRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        Role of user. It may be one of owner, admin, user or the name of a custom role you've created.  # noqa: E501

        :param role: The role of this User.  # noqa: E501
        :type: UserRole
        """

        self._role = role

    @property
    def skype_username(self):
        """Gets the skype_username of this User.  # noqa: E501

        Skype username of the user  # noqa: E501

        :return: The skype_username of this User.  # noqa: E501
        :rtype: str
        """
        return self._skype_username

    @skype_username.setter
    def skype_username(self, skype_username):
        """Sets the skype_username of this User.

        Skype username of the user  # noqa: E501

        :param skype_username: The skype_username of this User.  # noqa: E501
        :type: str
        """

        self._skype_username = skype_username

    @property
    def time_zone(self):
        """Gets the time_zone of this User.  # noqa: E501

        Timezone of the user. If not set, timezone of the customer will be used instead.  # noqa: E501

        :return: The time_zone of this User.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this User.

        Timezone of the user. If not set, timezone of the customer will be used instead.  # noqa: E501

        :param time_zone: The time_zone of this User.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def locale(self):
        """Gets the locale of this User.  # noqa: E501

        Location information of the user. If not set, locale of the customer will be used instead.  # noqa: E501

        :return: The locale of this User.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.

        Location information of the user. If not set, locale of the customer will be used instead.  # noqa: E501

        :param locale: The locale of this User.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def user_address(self):
        """Gets the user_address of this User.  # noqa: E501

        Address of the user  # noqa: E501

        :return: The user_address of this User.  # noqa: E501
        :rtype: UserAddress
        """
        return self._user_address

    @user_address.setter
    def user_address(self, user_address):
        """Sets the user_address of this User.

        Address of the user  # noqa: E501

        :param user_address: The user_address of this User.  # noqa: E501
        :type: UserAddress
        """

        self._user_address = user_address

    @property
    def tags(self):
        """Gets the tags of this User.  # noqa: E501

        List of labels attached to the user. You can label users to differentiate them from the rest. For example, you can add ITManager tag to differentiate people with this role from others.  # noqa: E501

        :return: The tags of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this User.

        List of labels attached to the user. You can label users to differentiate them from the rest. For example, you can add ITManager tag to differentiate people with this role from others.  # noqa: E501

        :param tags: The tags of this User.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def details(self):
        """Gets the details of this User.  # noqa: E501

        Set of user defined properties.  # noqa: E501

        :return: The details of this User.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this User.

        Set of user defined properties.  # noqa: E501

        :param details: The details of this User.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._details = details

    @property
    def blocked(self):
        """Gets the blocked of this User.  # noqa: E501


        :return: The blocked of this User.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this User.


        :param blocked: The blocked of this User.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def verified(self):
        """Gets the verified of this User.  # noqa: E501


        :return: The verified of this User.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this User.


        :param verified: The verified of this User.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501


        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def muted_until(self):
        """Gets the muted_until of this User.  # noqa: E501


        :return: The muted_until of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._muted_until

    @muted_until.setter
    def muted_until(self, muted_until):
        """Sets the muted_until of this User.


        :param muted_until: The muted_until of this User.  # noqa: E501
        :type: datetime
        """

        self._muted_until = muted_until

    @property
    def user_contacts(self):
        """Gets the user_contacts of this User.  # noqa: E501


        :return: The user_contacts of this User.  # noqa: E501
        :rtype: list[UserContact]
        """
        return self._user_contacts

    @user_contacts.setter
    def user_contacts(self, user_contacts):
        """Sets the user_contacts of this User.


        :param user_contacts: The user_contacts of this User.  # noqa: E501
        :type: list[UserContact]
        """

        self._user_contacts = user_contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
