# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.recipient import Recipient  # noqa: F401,E501
from opsgenie_swagger.models.time_restriction_interval import TimeRestrictionInterval  # noqa: F401,E501


class ScheduleRotation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'type': 'str',
        'length': 'int',
        'participants': 'list[Recipient]',
        'time_restriction': 'TimeRestrictionInterval'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'type': 'type',
        'length': 'length',
        'participants': 'participants',
        'time_restriction': 'timeRestriction'
    }

    def __init__(self, id=None, name=None, start_date=None, end_date=None, type=None, length=None, participants=None, time_restriction=None):  # noqa: E501
        """ScheduleRotation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._start_date = None
        self._end_date = None
        self._type = None
        self._length = None
        self._participants = None
        self._time_restriction = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if type is not None:
            self.type = type
        if length is not None:
            self.length = length
        if participants is not None:
            self.participants = participants
        if time_restriction is not None:
            self.time_restriction = time_restriction

    @property
    def id(self):
        """Gets the id of this ScheduleRotation.  # noqa: E501


        :return: The id of this ScheduleRotation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduleRotation.


        :param id: The id of this ScheduleRotation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ScheduleRotation.  # noqa: E501


        :return: The name of this ScheduleRotation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleRotation.


        :param name: The name of this ScheduleRotation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this ScheduleRotation.  # noqa: E501


        :return: The start_date of this ScheduleRotation.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ScheduleRotation.


        :param start_date: The start_date of this ScheduleRotation.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ScheduleRotation.  # noqa: E501


        :return: The end_date of this ScheduleRotation.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ScheduleRotation.


        :param end_date: The end_date of this ScheduleRotation.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def type(self):
        """Gets the type of this ScheduleRotation.  # noqa: E501


        :return: The type of this ScheduleRotation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScheduleRotation.


        :param type: The type of this ScheduleRotation.  # noqa: E501
        :type: str
        """
        allowed_values = ["daily", "weekly", "hourly"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def length(self):
        """Gets the length of this ScheduleRotation.  # noqa: E501


        :return: The length of this ScheduleRotation.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ScheduleRotation.


        :param length: The length of this ScheduleRotation.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def participants(self):
        """Gets the participants of this ScheduleRotation.  # noqa: E501


        :return: The participants of this ScheduleRotation.  # noqa: E501
        :rtype: list[Recipient]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this ScheduleRotation.


        :param participants: The participants of this ScheduleRotation.  # noqa: E501
        :type: list[Recipient]
        """

        self._participants = participants

    @property
    def time_restriction(self):
        """Gets the time_restriction of this ScheduleRotation.  # noqa: E501


        :return: The time_restriction of this ScheduleRotation.  # noqa: E501
        :rtype: TimeRestrictionInterval
        """
        return self._time_restriction

    @time_restriction.setter
    def time_restriction(self, time_restriction):
        """Sets the time_restriction of this ScheduleRotation.


        :param time_restriction: The time_restriction of this ScheduleRotation.  # noqa: E501
        :type: TimeRestrictionInterval
        """

        self._time_restriction = time_restriction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleRotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
