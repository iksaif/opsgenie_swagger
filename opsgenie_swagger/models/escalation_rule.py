# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.duration import Duration  # noqa: F401,E501
from opsgenie_swagger.models.recipient import Recipient  # noqa: F401,E501


class EscalationRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition': 'str',
        'notify_type': 'str',
        'delay': 'Duration',
        'recipient': 'Recipient'
    }

    attribute_map = {
        'condition': 'condition',
        'notify_type': 'notifyType',
        'delay': 'delay',
        'recipient': 'recipient'
    }

    def __init__(self, condition='if-not-acked', notify_type='default', delay=None, recipient=None):  # noqa: E501
        """EscalationRule - a model defined in Swagger"""  # noqa: E501

        self._condition = None
        self._notify_type = None
        self._delay = None
        self._recipient = None
        self.discriminator = None

        self.condition = condition
        self.notify_type = notify_type
        self.delay = delay
        self.recipient = recipient

    @property
    def condition(self):
        """Gets the condition of this EscalationRule.  # noqa: E501


        :return: The condition of this EscalationRule.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this EscalationRule.


        :param condition: The condition of this EscalationRule.  # noqa: E501
        :type: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")  # noqa: E501
        allowed_values = ["if-not-acked", "if-not-closed"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"  # noqa: E501
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def notify_type(self):
        """Gets the notify_type of this EscalationRule.  # noqa: E501


        :return: The notify_type of this EscalationRule.  # noqa: E501
        :rtype: str
        """
        return self._notify_type

    @notify_type.setter
    def notify_type(self, notify_type):
        """Sets the notify_type of this EscalationRule.


        :param notify_type: The notify_type of this EscalationRule.  # noqa: E501
        :type: str
        """
        if notify_type is None:
            raise ValueError("Invalid value for `notify_type`, must not be `None`")  # noqa: E501
        allowed_values = ["default", "next", "previous", "users", "admins", "all"]  # noqa: E501
        if notify_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notify_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notify_type, allowed_values)
            )

        self._notify_type = notify_type

    @property
    def delay(self):
        """Gets the delay of this EscalationRule.  # noqa: E501


        :return: The delay of this EscalationRule.  # noqa: E501
        :rtype: Duration
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this EscalationRule.


        :param delay: The delay of this EscalationRule.  # noqa: E501
        :type: Duration
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501

        self._delay = delay

    @property
    def recipient(self):
        """Gets the recipient of this EscalationRule.  # noqa: E501


        :return: The recipient of this EscalationRule.  # noqa: E501
        :rtype: Recipient
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this EscalationRule.


        :param recipient: The recipient of this EscalationRule.  # noqa: E501
        :type: Recipient
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EscalationRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
