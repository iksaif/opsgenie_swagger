# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Duration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_amount': 'int',
        'time_unit': 'str'
    }

    attribute_map = {
        'time_amount': 'timeAmount',
        'time_unit': 'timeUnit'
    }

    def __init__(self, time_amount=None, time_unit='minutes'):  # noqa: E501
        """Duration - a model defined in Swagger"""  # noqa: E501

        self._time_amount = None
        self._time_unit = None
        self.discriminator = None

        self.time_amount = time_amount
        if time_unit is not None:
            self.time_unit = time_unit

    @property
    def time_amount(self):
        """Gets the time_amount of this Duration.  # noqa: E501


        :return: The time_amount of this Duration.  # noqa: E501
        :rtype: int
        """
        return self._time_amount

    @time_amount.setter
    def time_amount(self, time_amount):
        """Sets the time_amount of this Duration.


        :param time_amount: The time_amount of this Duration.  # noqa: E501
        :type: int
        """
        if time_amount is None:
            raise ValueError("Invalid value for `time_amount`, must not be `None`")  # noqa: E501

        self._time_amount = time_amount

    @property
    def time_unit(self):
        """Gets the time_unit of this Duration.  # noqa: E501


        :return: The time_unit of this Duration.  # noqa: E501
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this Duration.


        :param time_unit: The time_unit of this Duration.  # noqa: E501
        :type: str
        """
        allowed_values = ["days", "hours", "minutes", "seconds", "miliseconds", "micros", "nanos"]  # noqa: E501
        if time_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `time_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(time_unit, allowed_values)
            )

        self._time_unit = time_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Duration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
