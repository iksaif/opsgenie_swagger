# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.participant import Participant  # noqa: F401,E501
from opsgenie_swagger.models.schedule_meta import ScheduleMeta  # noqa: F401,E501


class NextOnCall(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent': 'ScheduleMeta',
        'next_on_call_recipients': 'list[Participant]',
        'exact_next_on_call_recipients': 'list[Participant]',
        'next_on_call_participants': 'list[str]',
        'exact_next_on_call_participants': 'list[str]'
    }

    attribute_map = {
        'parent': '_parent',
        'next_on_call_recipients': 'nextOnCallRecipients',
        'exact_next_on_call_recipients': 'exactNextOnCallRecipients',
        'next_on_call_participants': 'nextOnCallParticipants',
        'exact_next_on_call_participants': 'exactNextOnCallParticipants'
    }

    def __init__(self, parent=None, next_on_call_recipients=None, exact_next_on_call_recipients=None, next_on_call_participants=None, exact_next_on_call_participants=None):  # noqa: E501
        """NextOnCall - a model defined in Swagger"""  # noqa: E501

        self._parent = None
        self._next_on_call_recipients = None
        self._exact_next_on_call_recipients = None
        self._next_on_call_participants = None
        self._exact_next_on_call_participants = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        if next_on_call_recipients is not None:
            self.next_on_call_recipients = next_on_call_recipients
        if exact_next_on_call_recipients is not None:
            self.exact_next_on_call_recipients = exact_next_on_call_recipients
        if next_on_call_participants is not None:
            self.next_on_call_participants = next_on_call_participants
        if exact_next_on_call_participants is not None:
            self.exact_next_on_call_participants = exact_next_on_call_participants

    @property
    def parent(self):
        """Gets the parent of this NextOnCall.  # noqa: E501


        :return: The parent of this NextOnCall.  # noqa: E501
        :rtype: ScheduleMeta
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this NextOnCall.


        :param parent: The parent of this NextOnCall.  # noqa: E501
        :type: ScheduleMeta
        """

        self._parent = parent

    @property
    def next_on_call_recipients(self):
        """Gets the next_on_call_recipients of this NextOnCall.  # noqa: E501


        :return: The next_on_call_recipients of this NextOnCall.  # noqa: E501
        :rtype: list[Participant]
        """
        return self._next_on_call_recipients

    @next_on_call_recipients.setter
    def next_on_call_recipients(self, next_on_call_recipients):
        """Sets the next_on_call_recipients of this NextOnCall.


        :param next_on_call_recipients: The next_on_call_recipients of this NextOnCall.  # noqa: E501
        :type: list[Participant]
        """

        self._next_on_call_recipients = next_on_call_recipients

    @property
    def exact_next_on_call_recipients(self):
        """Gets the exact_next_on_call_recipients of this NextOnCall.  # noqa: E501


        :return: The exact_next_on_call_recipients of this NextOnCall.  # noqa: E501
        :rtype: list[Participant]
        """
        return self._exact_next_on_call_recipients

    @exact_next_on_call_recipients.setter
    def exact_next_on_call_recipients(self, exact_next_on_call_recipients):
        """Sets the exact_next_on_call_recipients of this NextOnCall.


        :param exact_next_on_call_recipients: The exact_next_on_call_recipients of this NextOnCall.  # noqa: E501
        :type: list[Participant]
        """

        self._exact_next_on_call_recipients = exact_next_on_call_recipients

    @property
    def next_on_call_participants(self):
        """Gets the next_on_call_participants of this NextOnCall.  # noqa: E501


        :return: The next_on_call_participants of this NextOnCall.  # noqa: E501
        :rtype: list[str]
        """
        return self._next_on_call_participants

    @next_on_call_participants.setter
    def next_on_call_participants(self, next_on_call_participants):
        """Sets the next_on_call_participants of this NextOnCall.


        :param next_on_call_participants: The next_on_call_participants of this NextOnCall.  # noqa: E501
        :type: list[str]
        """

        self._next_on_call_participants = next_on_call_participants

    @property
    def exact_next_on_call_participants(self):
        """Gets the exact_next_on_call_participants of this NextOnCall.  # noqa: E501


        :return: The exact_next_on_call_participants of this NextOnCall.  # noqa: E501
        :rtype: list[str]
        """
        return self._exact_next_on_call_participants

    @exact_next_on_call_participants.setter
    def exact_next_on_call_participants(self, exact_next_on_call_participants):
        """Sets the exact_next_on_call_participants of this NextOnCall.


        :param exact_next_on_call_participants: The exact_next_on_call_participants of this NextOnCall.  # noqa: E501
        :type: list[str]
        """

        self._exact_next_on_call_participants = exact_next_on_call_participants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NextOnCall):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
