# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.participant import Participant  # noqa: F401,E501


class Participant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'on_call_participants': 'list[Participant]',
        'forwarded_from': 'Participant',
        'escalation_time': 'int',
        'notify_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'on_call_participants': 'onCallParticipants',
        'forwarded_from': 'forwardedFrom',
        'escalation_time': 'escalationTime',
        'notify_type': 'notifyType'
    }

    def __init__(self, id=None, name=None, type=None, on_call_participants=None, forwarded_from=None, escalation_time=None, notify_type=None):  # noqa: E501
        """Participant - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._on_call_participants = None
        self._forwarded_from = None
        self._escalation_time = None
        self._notify_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if on_call_participants is not None:
            self.on_call_participants = on_call_participants
        if forwarded_from is not None:
            self.forwarded_from = forwarded_from
        if escalation_time is not None:
            self.escalation_time = escalation_time
        if notify_type is not None:
            self.notify_type = notify_type

    @property
    def id(self):
        """Gets the id of this Participant.  # noqa: E501


        :return: The id of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Participant.


        :param id: The id of this Participant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Participant.  # noqa: E501


        :return: The name of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Participant.


        :param name: The name of this Participant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Participant.  # noqa: E501


        :return: The type of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Participant.


        :param type: The type of this Participant.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def on_call_participants(self):
        """Gets the on_call_participants of this Participant.  # noqa: E501


        :return: The on_call_participants of this Participant.  # noqa: E501
        :rtype: list[Participant]
        """
        return self._on_call_participants

    @on_call_participants.setter
    def on_call_participants(self, on_call_participants):
        """Sets the on_call_participants of this Participant.


        :param on_call_participants: The on_call_participants of this Participant.  # noqa: E501
        :type: list[Participant]
        """

        self._on_call_participants = on_call_participants

    @property
    def forwarded_from(self):
        """Gets the forwarded_from of this Participant.  # noqa: E501


        :return: The forwarded_from of this Participant.  # noqa: E501
        :rtype: Participant
        """
        return self._forwarded_from

    @forwarded_from.setter
    def forwarded_from(self, forwarded_from):
        """Sets the forwarded_from of this Participant.


        :param forwarded_from: The forwarded_from of this Participant.  # noqa: E501
        :type: Participant
        """

        self._forwarded_from = forwarded_from

    @property
    def escalation_time(self):
        """Gets the escalation_time of this Participant.  # noqa: E501

        Only used by 'escalation' participants  # noqa: E501

        :return: The escalation_time of this Participant.  # noqa: E501
        :rtype: int
        """
        return self._escalation_time

    @escalation_time.setter
    def escalation_time(self, escalation_time):
        """Sets the escalation_time of this Participant.

        Only used by 'escalation' participants  # noqa: E501

        :param escalation_time: The escalation_time of this Participant.  # noqa: E501
        :type: int
        """

        self._escalation_time = escalation_time

    @property
    def notify_type(self):
        """Gets the notify_type of this Participant.  # noqa: E501

        Only used by 'escalation' participants  # noqa: E501

        :return: The notify_type of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._notify_type

    @notify_type.setter
    def notify_type(self, notify_type):
        """Sets the notify_type of this Participant.

        Only used by 'escalation' participants  # noqa: E501

        :param notify_type: The notify_type of this Participant.  # noqa: E501
        :type: str
        """

        self._notify_type = notify_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Participant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
