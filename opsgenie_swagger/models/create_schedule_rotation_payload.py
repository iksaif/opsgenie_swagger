# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.recipient import Recipient  # noqa: F401,E501
from opsgenie_swagger.models.time_restriction_interval import TimeRestrictionInterval  # noqa: F401,E501


class CreateScheduleRotationPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'type': 'str',
        'length': 'int',
        'participants': 'list[Recipient]',
        'time_restriction': 'TimeRestrictionInterval'
    }

    attribute_map = {
        'name': 'name',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'type': 'type',
        'length': 'length',
        'participants': 'participants',
        'time_restriction': 'timeRestriction'
    }

    def __init__(self, name=None, start_date=None, end_date=None, type=None, length=None, participants=None, time_restriction=None):  # noqa: E501
        """CreateScheduleRotationPayload - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._start_date = None
        self._end_date = None
        self._type = None
        self._length = None
        self._participants = None
        self._time_restriction = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        self.type = type
        if length is not None:
            self.length = length
        self.participants = participants
        if time_restriction is not None:
            self.time_restriction = time_restriction

    @property
    def name(self):
        """Gets the name of this CreateScheduleRotationPayload.  # noqa: E501

        Name of rotation  # noqa: E501

        :return: The name of this CreateScheduleRotationPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateScheduleRotationPayload.

        Name of rotation  # noqa: E501

        :param name: The name of this CreateScheduleRotationPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this CreateScheduleRotationPayload.  # noqa: E501

        Defines a date time as an override start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically  # noqa: E501

        :return: The start_date of this CreateScheduleRotationPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateScheduleRotationPayload.

        Defines a date time as an override start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically  # noqa: E501

        :param start_date: The start_date of this CreateScheduleRotationPayload.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CreateScheduleRotationPayload.  # noqa: E501

        Defines a date time as an override end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically  # noqa: E501

        :return: The end_date of this CreateScheduleRotationPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreateScheduleRotationPayload.

        Defines a date time as an override end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically  # noqa: E501

        :param end_date: The end_date of this CreateScheduleRotationPayload.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def type(self):
        """Gets the type of this CreateScheduleRotationPayload.  # noqa: E501

        Type of rotation. May be one of 'daily', 'weekly' and 'hourly'  # noqa: E501

        :return: The type of this CreateScheduleRotationPayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateScheduleRotationPayload.

        Type of rotation. May be one of 'daily', 'weekly' and 'hourly'  # noqa: E501

        :param type: The type of this CreateScheduleRotationPayload.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["daily", "weekly", "hourly"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def length(self):
        """Gets the length of this CreateScheduleRotationPayload.  # noqa: E501

        Length of the rotation with default value 1  # noqa: E501

        :return: The length of this CreateScheduleRotationPayload.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CreateScheduleRotationPayload.

        Length of the rotation with default value 1  # noqa: E501

        :param length: The length of this CreateScheduleRotationPayload.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def participants(self):
        """Gets the participants of this CreateScheduleRotationPayload.  # noqa: E501

        List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given.  # noqa: E501

        :return: The participants of this CreateScheduleRotationPayload.  # noqa: E501
        :rtype: list[Recipient]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this CreateScheduleRotationPayload.

        List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given.  # noqa: E501

        :param participants: The participants of this CreateScheduleRotationPayload.  # noqa: E501
        :type: list[Recipient]
        """
        if participants is None:
            raise ValueError("Invalid value for `participants`, must not be `None`")  # noqa: E501

        self._participants = participants

    @property
    def time_restriction(self):
        """Gets the time_restriction of this CreateScheduleRotationPayload.  # noqa: E501

        Used to limit schedule rotation to certain day and time of the week, using multiple start and end times for each day of the week.  # noqa: E501

        :return: The time_restriction of this CreateScheduleRotationPayload.  # noqa: E501
        :rtype: TimeRestrictionInterval
        """
        return self._time_restriction

    @time_restriction.setter
    def time_restriction(self, time_restriction):
        """Sets the time_restriction of this CreateScheduleRotationPayload.

        Used to limit schedule rotation to certain day and time of the week, using multiple start and end times for each day of the week.  # noqa: E501

        :param time_restriction: The time_restriction of this CreateScheduleRotationPayload.  # noqa: E501
        :type: TimeRestrictionInterval
        """

        self._time_restriction = time_restriction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateScheduleRotationPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
