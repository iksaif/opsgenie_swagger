# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.auto_close_action import AutoCloseAction  # noqa: F401,E501
from opsgenie_swagger.models.auto_restart_action import AutoRestartAction  # noqa: F401,E501
from opsgenie_swagger.models.deduplication_action import DeduplicationAction  # noqa: F401,E501
from opsgenie_swagger.models.delay_action import DelayAction  # noqa: F401,E501
from opsgenie_swagger.models.filter import Filter  # noqa: F401,E501
from opsgenie_swagger.models.policy import Policy  # noqa: F401,E501
from opsgenie_swagger.models.time_restriction_interval import TimeRestrictionInterval  # noqa: F401,E501


class NotificationPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_restart_action': 'AutoRestartAction',
        'auto_close_action': 'AutoCloseAction',
        'deduplication_action': 'DeduplicationAction',
        'delay_action': 'DelayAction',
        'suppress': 'bool'
    }

    attribute_map = {
        'auto_restart_action': 'autoRestartAction',
        'auto_close_action': 'autoCloseAction',
        'deduplication_action': 'deduplicationAction',
        'delay_action': 'delayAction',
        'suppress': 'suppress'
    }

    def __init__(self, auto_restart_action=None, auto_close_action=None, deduplication_action=None, delay_action=None, suppress=None):  # noqa: E501
        """NotificationPolicy - a model defined in Swagger"""  # noqa: E501

        self._auto_restart_action = None
        self._auto_close_action = None
        self._deduplication_action = None
        self._delay_action = None
        self._suppress = None
        self.discriminator = None

        if auto_restart_action is not None:
            self.auto_restart_action = auto_restart_action
        if auto_close_action is not None:
            self.auto_close_action = auto_close_action
        if deduplication_action is not None:
            self.deduplication_action = deduplication_action
        if delay_action is not None:
            self.delay_action = delay_action
        if suppress is not None:
            self.suppress = suppress

    @property
    def auto_restart_action(self):
        """Gets the auto_restart_action of this NotificationPolicy.  # noqa: E501

        Auto-restart action defined for the policy.  # noqa: E501

        :return: The auto_restart_action of this NotificationPolicy.  # noqa: E501
        :rtype: AutoRestartAction
        """
        return self._auto_restart_action

    @auto_restart_action.setter
    def auto_restart_action(self, auto_restart_action):
        """Sets the auto_restart_action of this NotificationPolicy.

        Auto-restart action defined for the policy.  # noqa: E501

        :param auto_restart_action: The auto_restart_action of this NotificationPolicy.  # noqa: E501
        :type: AutoRestartAction
        """

        self._auto_restart_action = auto_restart_action

    @property
    def auto_close_action(self):
        """Gets the auto_close_action of this NotificationPolicy.  # noqa: E501

        Auto-close action defined for the policy.  # noqa: E501

        :return: The auto_close_action of this NotificationPolicy.  # noqa: E501
        :rtype: AutoCloseAction
        """
        return self._auto_close_action

    @auto_close_action.setter
    def auto_close_action(self, auto_close_action):
        """Sets the auto_close_action of this NotificationPolicy.

        Auto-close action defined for the policy.  # noqa: E501

        :param auto_close_action: The auto_close_action of this NotificationPolicy.  # noqa: E501
        :type: AutoCloseAction
        """

        self._auto_close_action = auto_close_action

    @property
    def deduplication_action(self):
        """Gets the deduplication_action of this NotificationPolicy.  # noqa: E501

        Deduplication action defined for the policy.  # noqa: E501

        :return: The deduplication_action of this NotificationPolicy.  # noqa: E501
        :rtype: DeduplicationAction
        """
        return self._deduplication_action

    @deduplication_action.setter
    def deduplication_action(self, deduplication_action):
        """Sets the deduplication_action of this NotificationPolicy.

        Deduplication action defined for the policy.  # noqa: E501

        :param deduplication_action: The deduplication_action of this NotificationPolicy.  # noqa: E501
        :type: DeduplicationAction
        """

        self._deduplication_action = deduplication_action

    @property
    def delay_action(self):
        """Gets the delay_action of this NotificationPolicy.  # noqa: E501

        Delay action defined for the policy.  # noqa: E501

        :return: The delay_action of this NotificationPolicy.  # noqa: E501
        :rtype: DelayAction
        """
        return self._delay_action

    @delay_action.setter
    def delay_action(self, delay_action):
        """Sets the delay_action of this NotificationPolicy.

        Delay action defined for the policy.  # noqa: E501

        :param delay_action: The delay_action of this NotificationPolicy.  # noqa: E501
        :type: DelayAction
        """

        self._delay_action = delay_action

    @property
    def suppress(self):
        """Gets the suppress of this NotificationPolicy.  # noqa: E501

        If set to true, notifications related to the matching alert will be suppressed. Default value is false.  # noqa: E501

        :return: The suppress of this NotificationPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._suppress

    @suppress.setter
    def suppress(self, suppress):
        """Sets the suppress of this NotificationPolicy.

        If set to true, notifications related to the matching alert will be suppressed. Default value is false.  # noqa: E501

        :param suppress: The suppress of this NotificationPolicy.  # noqa: E501
        :type: bool
        """

        self._suppress = suppress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
