# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateCustomUserRolePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'extended_role': 'str',
        'granted_rights': 'list[str]',
        'disallowed_rights': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'extended_role': 'extendedRole',
        'granted_rights': 'grantedRights',
        'disallowed_rights': 'disallowedRights'
    }

    def __init__(self, name=None, extended_role=None, granted_rights=None, disallowed_rights=None):  # noqa: E501
        """CreateCustomUserRolePayload - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._extended_role = None
        self._granted_rights = None
        self._disallowed_rights = None
        self.discriminator = None

        self.name = name
        if extended_role is not None:
            self.extended_role = extended_role
        if granted_rights is not None:
            self.granted_rights = granted_rights
        if disallowed_rights is not None:
            self.disallowed_rights = disallowed_rights

    @property
    def name(self):
        """Gets the name of this CreateCustomUserRolePayload.  # noqa: E501

        Name of custom user role  # noqa: E501

        :return: The name of this CreateCustomUserRolePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCustomUserRolePayload.

        Name of custom user role  # noqa: E501

        :param name: The name of this CreateCustomUserRolePayload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def extended_role(self):
        """Gets the extended_role of this CreateCustomUserRolePayload.  # noqa: E501

        Custom role. Must not be one of the defined values (i.e. \"user\", \"observer\", \"stakeholder\")  # noqa: E501

        :return: The extended_role of this CreateCustomUserRolePayload.  # noqa: E501
        :rtype: str
        """
        return self._extended_role

    @extended_role.setter
    def extended_role(self, extended_role):
        """Sets the extended_role of this CreateCustomUserRolePayload.

        Custom role. Must not be one of the defined values (i.e. \"user\", \"observer\", \"stakeholder\")  # noqa: E501

        :param extended_role: The extended_role of this CreateCustomUserRolePayload.  # noqa: E501
        :type: str
        """

        self._extended_role = extended_role

    @property
    def granted_rights(self):
        """Gets the granted_rights of this CreateCustomUserRolePayload.  # noqa: E501

        Rights granted to the custom user role.  # noqa: E501

        :return: The granted_rights of this CreateCustomUserRolePayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._granted_rights

    @granted_rights.setter
    def granted_rights(self, granted_rights):
        """Sets the granted_rights of this CreateCustomUserRolePayload.

        Rights granted to the custom user role.  # noqa: E501

        :param granted_rights: The granted_rights of this CreateCustomUserRolePayload.  # noqa: E501
        :type: list[str]
        """

        self._granted_rights = granted_rights

    @property
    def disallowed_rights(self):
        """Gets the disallowed_rights of this CreateCustomUserRolePayload.  # noqa: E501

        Rights disallowed for the custom user role.  # noqa: E501

        :return: The disallowed_rights of this CreateCustomUserRolePayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._disallowed_rights

    @disallowed_rights.setter
    def disallowed_rights(self, disallowed_rights):
        """Sets the disallowed_rights of this CreateCustomUserRolePayload.

        Rights disallowed for the custom user role.  # noqa: E501

        :param disallowed_rights: The disallowed_rights of this CreateCustomUserRolePayload.  # noqa: E501
        :type: list[str]
        """

        self._disallowed_rights = disallowed_rights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCustomUserRolePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
