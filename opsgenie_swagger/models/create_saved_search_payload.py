# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.team_recipient import TeamRecipient  # noqa: F401,E501
from opsgenie_swagger.models.user_recipient import UserRecipient  # noqa: F401,E501


class CreateSavedSearchPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'query': 'str',
        'owner': 'UserRecipient',
        'teams': 'list[TeamRecipient]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'query': 'query',
        'owner': 'owner',
        'teams': 'teams'
    }

    def __init__(self, name=None, description=None, query=None, owner=None, teams=None):  # noqa: E501
        """CreateSavedSearchPayload - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._query = None
        self._owner = None
        self._teams = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.query = query
        self.owner = owner
        if teams is not None:
            self.teams = teams

    @property
    def name(self):
        """Gets the name of this CreateSavedSearchPayload.  # noqa: E501


        :return: The name of this CreateSavedSearchPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSavedSearchPayload.


        :param name: The name of this CreateSavedSearchPayload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateSavedSearchPayload.  # noqa: E501


        :return: The description of this CreateSavedSearchPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSavedSearchPayload.


        :param description: The description of this CreateSavedSearchPayload.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 15000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `15000`")  # noqa: E501

        self._description = description

    @property
    def query(self):
        """Gets the query of this CreateSavedSearchPayload.  # noqa: E501


        :return: The query of this CreateSavedSearchPayload.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CreateSavedSearchPayload.


        :param query: The query of this CreateSavedSearchPayload.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501
        if query is not None and len(query) > 1000:
            raise ValueError("Invalid value for `query`, length must be less than or equal to `1000`")  # noqa: E501

        self._query = query

    @property
    def owner(self):
        """Gets the owner of this CreateSavedSearchPayload.  # noqa: E501


        :return: The owner of this CreateSavedSearchPayload.  # noqa: E501
        :rtype: UserRecipient
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CreateSavedSearchPayload.


        :param owner: The owner of this CreateSavedSearchPayload.  # noqa: E501
        :type: UserRecipient
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def teams(self):
        """Gets the teams of this CreateSavedSearchPayload.  # noqa: E501

        Teams that the alert will be routed to send notifications  # noqa: E501

        :return: The teams of this CreateSavedSearchPayload.  # noqa: E501
        :rtype: list[TeamRecipient]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this CreateSavedSearchPayload.

        Teams that the alert will be routed to send notifications  # noqa: E501

        :param teams: The teams of this CreateSavedSearchPayload.  # noqa: E501
        :type: list[TeamRecipient]
        """

        self._teams = teams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSavedSearchPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
