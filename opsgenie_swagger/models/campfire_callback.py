# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.outgoing_callback import OutgoingCallback  # noqa: F401,E501


class CampfireCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'subdomain': 'str',
        'notify': 'bool',
        'rooms': 'dict(str, str)'
    }

    attribute_map = {
        'token': 'token',
        'subdomain': 'subdomain',
        'notify': 'notify',
        'rooms': 'rooms'
    }

    def __init__(self, token=None, subdomain=None, notify=None, rooms=None):  # noqa: E501
        """CampfireCallback - a model defined in Swagger"""  # noqa: E501

        self._token = None
        self._subdomain = None
        self._notify = None
        self._rooms = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if subdomain is not None:
            self.subdomain = subdomain
        if notify is not None:
            self.notify = notify
        if rooms is not None:
            self.rooms = rooms

    @property
    def token(self):
        """Gets the token of this CampfireCallback.  # noqa: E501


        :return: The token of this CampfireCallback.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CampfireCallback.


        :param token: The token of this CampfireCallback.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def subdomain(self):
        """Gets the subdomain of this CampfireCallback.  # noqa: E501


        :return: The subdomain of this CampfireCallback.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this CampfireCallback.


        :param subdomain: The subdomain of this CampfireCallback.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def notify(self):
        """Gets the notify of this CampfireCallback.  # noqa: E501


        :return: The notify of this CampfireCallback.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this CampfireCallback.


        :param notify: The notify of this CampfireCallback.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    @property
    def rooms(self):
        """Gets the rooms of this CampfireCallback.  # noqa: E501


        :return: The rooms of this CampfireCallback.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this CampfireCallback.


        :param rooms: The rooms of this CampfireCallback.  # noqa: E501
        :type: dict(str, str)
        """

        self._rooms = rooms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampfireCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
