# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.action_mapping import ActionMapping  # noqa: F401,E501
from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.bidirectional_callback_new import BidirectionalCallbackNew  # noqa: F401,E501


class JiraServiceDeskCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jira_username': 'str',
        'jira_password': 'str',
        'jira_url': 'str',
        'project_key': 'str',
        'issue_type_name': 'str'
    }

    attribute_map = {
        'jira_username': 'jiraUsername',
        'jira_password': 'jiraPassword',
        'jira_url': 'jiraUrl',
        'project_key': 'projectKey',
        'issue_type_name': 'issueTypeName'
    }

    def __init__(self, jira_username=None, jira_password=None, jira_url=None, project_key=None, issue_type_name=None):  # noqa: E501
        """JiraServiceDeskCallback - a model defined in Swagger"""  # noqa: E501

        self._jira_username = None
        self._jira_password = None
        self._jira_url = None
        self._project_key = None
        self._issue_type_name = None
        self.discriminator = None

        if jira_username is not None:
            self.jira_username = jira_username
        if jira_password is not None:
            self.jira_password = jira_password
        if jira_url is not None:
            self.jira_url = jira_url
        if project_key is not None:
            self.project_key = project_key
        if issue_type_name is not None:
            self.issue_type_name = issue_type_name

    @property
    def jira_username(self):
        """Gets the jira_username of this JiraServiceDeskCallback.  # noqa: E501


        :return: The jira_username of this JiraServiceDeskCallback.  # noqa: E501
        :rtype: str
        """
        return self._jira_username

    @jira_username.setter
    def jira_username(self, jira_username):
        """Sets the jira_username of this JiraServiceDeskCallback.


        :param jira_username: The jira_username of this JiraServiceDeskCallback.  # noqa: E501
        :type: str
        """

        self._jira_username = jira_username

    @property
    def jira_password(self):
        """Gets the jira_password of this JiraServiceDeskCallback.  # noqa: E501


        :return: The jira_password of this JiraServiceDeskCallback.  # noqa: E501
        :rtype: str
        """
        return self._jira_password

    @jira_password.setter
    def jira_password(self, jira_password):
        """Sets the jira_password of this JiraServiceDeskCallback.


        :param jira_password: The jira_password of this JiraServiceDeskCallback.  # noqa: E501
        :type: str
        """

        self._jira_password = jira_password

    @property
    def jira_url(self):
        """Gets the jira_url of this JiraServiceDeskCallback.  # noqa: E501


        :return: The jira_url of this JiraServiceDeskCallback.  # noqa: E501
        :rtype: str
        """
        return self._jira_url

    @jira_url.setter
    def jira_url(self, jira_url):
        """Sets the jira_url of this JiraServiceDeskCallback.


        :param jira_url: The jira_url of this JiraServiceDeskCallback.  # noqa: E501
        :type: str
        """

        self._jira_url = jira_url

    @property
    def project_key(self):
        """Gets the project_key of this JiraServiceDeskCallback.  # noqa: E501


        :return: The project_key of this JiraServiceDeskCallback.  # noqa: E501
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this JiraServiceDeskCallback.


        :param project_key: The project_key of this JiraServiceDeskCallback.  # noqa: E501
        :type: str
        """

        self._project_key = project_key

    @property
    def issue_type_name(self):
        """Gets the issue_type_name of this JiraServiceDeskCallback.  # noqa: E501


        :return: The issue_type_name of this JiraServiceDeskCallback.  # noqa: E501
        :rtype: str
        """
        return self._issue_type_name

    @issue_type_name.setter
    def issue_type_name(self, issue_type_name):
        """Sets the issue_type_name of this JiraServiceDeskCallback.


        :param issue_type_name: The issue_type_name of this JiraServiceDeskCallback.  # noqa: E501
        :type: str
        """

        self._issue_type_name = issue_type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraServiceDeskCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
