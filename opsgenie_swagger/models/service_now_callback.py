# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.action_mapping import ActionMapping  # noqa: F401,E501
from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.bidirectional_callback_new import BidirectionalCallbackNew  # noqa: F401,E501


class ServiceNowCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scripted_rest_apiurl': 'str',
        'servicenow_user_name': 'str',
        'servicenow_password': 'str'
    }

    attribute_map = {
        'scripted_rest_apiurl': 'scriptedRestAPIURL',
        'servicenow_user_name': 'servicenowUserName',
        'servicenow_password': 'servicenowPassword'
    }

    def __init__(self, scripted_rest_apiurl=None, servicenow_user_name=None, servicenow_password=None):  # noqa: E501
        """ServiceNowCallback - a model defined in Swagger"""  # noqa: E501

        self._scripted_rest_apiurl = None
        self._servicenow_user_name = None
        self._servicenow_password = None
        self.discriminator = None

        if scripted_rest_apiurl is not None:
            self.scripted_rest_apiurl = scripted_rest_apiurl
        if servicenow_user_name is not None:
            self.servicenow_user_name = servicenow_user_name
        if servicenow_password is not None:
            self.servicenow_password = servicenow_password

    @property
    def scripted_rest_apiurl(self):
        """Gets the scripted_rest_apiurl of this ServiceNowCallback.  # noqa: E501


        :return: The scripted_rest_apiurl of this ServiceNowCallback.  # noqa: E501
        :rtype: str
        """
        return self._scripted_rest_apiurl

    @scripted_rest_apiurl.setter
    def scripted_rest_apiurl(self, scripted_rest_apiurl):
        """Sets the scripted_rest_apiurl of this ServiceNowCallback.


        :param scripted_rest_apiurl: The scripted_rest_apiurl of this ServiceNowCallback.  # noqa: E501
        :type: str
        """

        self._scripted_rest_apiurl = scripted_rest_apiurl

    @property
    def servicenow_user_name(self):
        """Gets the servicenow_user_name of this ServiceNowCallback.  # noqa: E501


        :return: The servicenow_user_name of this ServiceNowCallback.  # noqa: E501
        :rtype: str
        """
        return self._servicenow_user_name

    @servicenow_user_name.setter
    def servicenow_user_name(self, servicenow_user_name):
        """Sets the servicenow_user_name of this ServiceNowCallback.


        :param servicenow_user_name: The servicenow_user_name of this ServiceNowCallback.  # noqa: E501
        :type: str
        """

        self._servicenow_user_name = servicenow_user_name

    @property
    def servicenow_password(self):
        """Gets the servicenow_password of this ServiceNowCallback.  # noqa: E501


        :return: The servicenow_password of this ServiceNowCallback.  # noqa: E501
        :rtype: str
        """
        return self._servicenow_password

    @servicenow_password.setter
    def servicenow_password(self, servicenow_password):
        """Sets the servicenow_password of this ServiceNowCallback.


        :param servicenow_password: The servicenow_password of this ServiceNowCallback.  # noqa: E501
        :type: str
        """

        self._servicenow_password = servicenow_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceNowCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
