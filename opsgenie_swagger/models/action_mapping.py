# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActionMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'extra_field': 'str',
        'extra_field_for_mapped_action': 'str',
        'mapped_action': 'str'
    }

    attribute_map = {
        'action': 'action',
        'extra_field': 'extraField',
        'extra_field_for_mapped_action': 'extraFieldForMappedAction',
        'mapped_action': 'mappedAction'
    }

    def __init__(self, action=None, extra_field=None, extra_field_for_mapped_action=None, mapped_action=None):  # noqa: E501
        """ActionMapping - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._extra_field = None
        self._extra_field_for_mapped_action = None
        self._mapped_action = None
        self.discriminator = None

        self.action = action
        if extra_field is not None:
            self.extra_field = extra_field
        if extra_field_for_mapped_action is not None:
            self.extra_field_for_mapped_action = extra_field_for_mapped_action
        if mapped_action is not None:
            self.mapped_action = mapped_action

    @property
    def action(self):
        """Gets the action of this ActionMapping.  # noqa: E501


        :return: The action of this ActionMapping.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ActionMapping.


        :param action: The action of this ActionMapping.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["create", "acknowledge", "unacknowledge", "snooze", "escalate-to-next", "add-note", "add-recipient", "add-team", "add-tags", "remove-tags", "close", "delete", "escalate", "custom-action", "assign-ownership", "take-ownership"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def extra_field(self):
        """Gets the extra_field of this ActionMapping.  # noqa: E501


        :return: The extra_field of this ActionMapping.  # noqa: E501
        :rtype: str
        """
        return self._extra_field

    @extra_field.setter
    def extra_field(self, extra_field):
        """Sets the extra_field of this ActionMapping.


        :param extra_field: The extra_field of this ActionMapping.  # noqa: E501
        :type: str
        """

        self._extra_field = extra_field

    @property
    def extra_field_for_mapped_action(self):
        """Gets the extra_field_for_mapped_action of this ActionMapping.  # noqa: E501


        :return: The extra_field_for_mapped_action of this ActionMapping.  # noqa: E501
        :rtype: str
        """
        return self._extra_field_for_mapped_action

    @extra_field_for_mapped_action.setter
    def extra_field_for_mapped_action(self, extra_field_for_mapped_action):
        """Sets the extra_field_for_mapped_action of this ActionMapping.


        :param extra_field_for_mapped_action: The extra_field_for_mapped_action of this ActionMapping.  # noqa: E501
        :type: str
        """

        self._extra_field_for_mapped_action = extra_field_for_mapped_action

    @property
    def mapped_action(self):
        """Gets the mapped_action of this ActionMapping.  # noqa: E501


        :return: The mapped_action of this ActionMapping.  # noqa: E501
        :rtype: str
        """
        return self._mapped_action

    @mapped_action.setter
    def mapped_action(self, mapped_action):
        """Sets the mapped_action of this ActionMapping.


        :param mapped_action: The mapped_action of this ActionMapping.  # noqa: E501
        :type: str
        """
        allowed_values = ["publish", "create-issue", "add-comment-to-issue", "in-progress-issue", "resolve-issue", "close-issue", "issue-done", "add-note", "add-tag", "create-conversation", "set-status-to-open", "set-status-to-pending", "set-status-to-completed", "send-to-channel", "acknowledge", "create-alert", "close-alert", "acknowledge-alert", "unacknowledge-alert", "create-incident", "add-note-to-incident", "resolve-incident", "close-incident", "assign-to-group", "assign-to-user", "assign-to-owner", "send-to-custom-endpoint", "create-incident-and-update-component-statuses", "resolve-incident-and-update-component-statuses-back-to-operational", "update-component-statuses", "create-ticket", "add-internal-note", "public-reply", "set-status-to-closed", "set-status-to-solved"]  # noqa: E501
        if mapped_action not in allowed_values:
            raise ValueError(
                "Invalid value for `mapped_action` ({0}), must be one of {1}"  # noqa: E501
                .format(mapped_action, allowed_values)
            )

        self._mapped_action = mapped_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
