# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.deprecated_alert_policy import DeprecatedAlertPolicy  # noqa: F401,E501
from opsgenie_swagger.models.duration import Duration  # noqa: F401,E501
from opsgenie_swagger.models.filter import Filter  # noqa: F401,E501
from opsgenie_swagger.models.time_restriction_interval import TimeRestrictionInterval  # noqa: F401,E501


class DeprecatedNotificationDelayAlertPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delay_option': 'str',
        'duration': 'Duration',
        'until_hour': 'int',
        'until_minute': 'int'
    }

    attribute_map = {
        'delay_option': 'delayOption',
        'duration': 'duration',
        'until_hour': 'untilHour',
        'until_minute': 'untilMinute'
    }

    def __init__(self, delay_option=None, duration=None, until_hour=None, until_minute=None):  # noqa: E501
        """DeprecatedNotificationDelayAlertPolicy - a model defined in Swagger"""  # noqa: E501

        self._delay_option = None
        self._duration = None
        self._until_hour = None
        self._until_minute = None
        self.discriminator = None

        if delay_option is not None:
            self.delay_option = delay_option
        if duration is not None:
            self.duration = duration
        if until_hour is not None:
            self.until_hour = until_hour
        if until_minute is not None:
            self.until_minute = until_minute

    @property
    def delay_option(self):
        """Gets the delay_option of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501

        Delay type  # noqa: E501

        :return: The delay_option of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :rtype: str
        """
        return self._delay_option

    @delay_option.setter
    def delay_option(self, delay_option):
        """Sets the delay_option of this DeprecatedNotificationDelayAlertPolicy.

        Delay type  # noqa: E501

        :param delay_option: The delay_option of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["for-duration", "next-time", "next-weekday", "next-monday", "next-tuesday", "next-wednesday", "next-thursday", "next-friday", "next-saturday", "next-sunday"]  # noqa: E501
        if delay_option not in allowed_values:
            raise ValueError(
                "Invalid value for `delay_option` ({0}), must be one of {1}"  # noqa: E501
                .format(delay_option, allowed_values)
            )

        self._delay_option = delay_option

    @property
    def duration(self):
        """Gets the duration of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501

        Interval to keep count of alerts for frequency based deduplication  # noqa: E501

        :return: The duration of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DeprecatedNotificationDelayAlertPolicy.

        Interval to keep count of alerts for frequency based deduplication  # noqa: E501

        :param duration: The duration of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :type: Duration
        """

        self._duration = duration

    @property
    def until_hour(self):
        """Gets the until_hour of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501

        Should be a number between 0-23  # noqa: E501

        :return: The until_hour of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :rtype: int
        """
        return self._until_hour

    @until_hour.setter
    def until_hour(self, until_hour):
        """Sets the until_hour of this DeprecatedNotificationDelayAlertPolicy.

        Should be a number between 0-23  # noqa: E501

        :param until_hour: The until_hour of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :type: int
        """
        if until_hour is not None and until_hour > 23:  # noqa: E501
            raise ValueError("Invalid value for `until_hour`, must be a value less than or equal to `23`")  # noqa: E501
        if until_hour is not None and until_hour < 0:  # noqa: E501
            raise ValueError("Invalid value for `until_hour`, must be a value greater than or equal to `0`")  # noqa: E501

        self._until_hour = until_hour

    @property
    def until_minute(self):
        """Gets the until_minute of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501

        Should be a number between 0-59  # noqa: E501

        :return: The until_minute of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :rtype: int
        """
        return self._until_minute

    @until_minute.setter
    def until_minute(self, until_minute):
        """Sets the until_minute of this DeprecatedNotificationDelayAlertPolicy.

        Should be a number between 0-59  # noqa: E501

        :param until_minute: The until_minute of this DeprecatedNotificationDelayAlertPolicy.  # noqa: E501
        :type: int
        """
        if until_minute is not None and until_minute > 59:  # noqa: E501
            raise ValueError("Invalid value for `until_minute`, must be a value less than or equal to `59`")  # noqa: E501
        if until_minute is not None and until_minute < 0:  # noqa: E501
            raise ValueError("Invalid value for `until_minute`, must be a value greater than or equal to `0`")  # noqa: E501

        self._until_minute = until_minute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeprecatedNotificationDelayAlertPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
