# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.outgoing_callback import OutgoingCallback  # noqa: F401,E501


class PlanioCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'planio_api_key': 'str',
        'project_id': 'int',
        'subdomain': 'str'
    }

    attribute_map = {
        'planio_api_key': 'planioApiKey',
        'project_id': 'projectId',
        'subdomain': 'subdomain'
    }

    def __init__(self, planio_api_key=None, project_id=None, subdomain=None):  # noqa: E501
        """PlanioCallback - a model defined in Swagger"""  # noqa: E501

        self._planio_api_key = None
        self._project_id = None
        self._subdomain = None
        self.discriminator = None

        if planio_api_key is not None:
            self.planio_api_key = planio_api_key
        if project_id is not None:
            self.project_id = project_id
        if subdomain is not None:
            self.subdomain = subdomain

    @property
    def planio_api_key(self):
        """Gets the planio_api_key of this PlanioCallback.  # noqa: E501


        :return: The planio_api_key of this PlanioCallback.  # noqa: E501
        :rtype: str
        """
        return self._planio_api_key

    @planio_api_key.setter
    def planio_api_key(self, planio_api_key):
        """Sets the planio_api_key of this PlanioCallback.


        :param planio_api_key: The planio_api_key of this PlanioCallback.  # noqa: E501
        :type: str
        """

        self._planio_api_key = planio_api_key

    @property
    def project_id(self):
        """Gets the project_id of this PlanioCallback.  # noqa: E501


        :return: The project_id of this PlanioCallback.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PlanioCallback.


        :param project_id: The project_id of this PlanioCallback.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def subdomain(self):
        """Gets the subdomain of this PlanioCallback.  # noqa: E501


        :return: The subdomain of this PlanioCallback.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this PlanioCallback.


        :param subdomain: The subdomain of this PlanioCallback.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanioCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
