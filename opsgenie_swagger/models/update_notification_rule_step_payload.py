# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.contact_meta import ContactMeta  # noqa: F401,E501
from opsgenie_swagger.models.duration import Duration  # noqa: F401,E501


class UpdateNotificationRuleStepPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact': 'ContactMeta',
        'send_after': 'Duration',
        'enabled': 'bool'
    }

    attribute_map = {
        'contact': 'contact',
        'send_after': 'sendAfter',
        'enabled': 'enabled'
    }

    def __init__(self, contact=None, send_after=None, enabled=None):  # noqa: E501
        """UpdateNotificationRuleStepPayload - a model defined in Swagger"""  # noqa: E501

        self._contact = None
        self._send_after = None
        self._enabled = None
        self.discriminator = None

        if contact is not None:
            self.contact = contact
        if send_after is not None:
            self.send_after = send_after
        if enabled is not None:
            self.enabled = enabled

    @property
    def contact(self):
        """Gets the contact of this UpdateNotificationRuleStepPayload.  # noqa: E501

        The contact that notification will be sent to.  # noqa: E501

        :return: The contact of this UpdateNotificationRuleStepPayload.  # noqa: E501
        :rtype: ContactMeta
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this UpdateNotificationRuleStepPayload.

        The contact that notification will be sent to.  # noqa: E501

        :param contact: The contact of this UpdateNotificationRuleStepPayload.  # noqa: E501
        :type: ContactMeta
        """

        self._contact = contact

    @property
    def send_after(self):
        """Gets the send_after of this UpdateNotificationRuleStepPayload.  # noqa: E501

        Time period (in minute) when notification will be sent after.  # noqa: E501

        :return: The send_after of this UpdateNotificationRuleStepPayload.  # noqa: E501
        :rtype: Duration
        """
        return self._send_after

    @send_after.setter
    def send_after(self, send_after):
        """Sets the send_after of this UpdateNotificationRuleStepPayload.

        Time period (in minute) when notification will be sent after.  # noqa: E501

        :param send_after: The send_after of this UpdateNotificationRuleStepPayload.  # noqa: E501
        :type: Duration
        """

        self._send_after = send_after

    @property
    def enabled(self):
        """Gets the enabled of this UpdateNotificationRuleStepPayload.  # noqa: E501

        Specifies whether given step will be enabled or not when it is updated.  # noqa: E501

        :return: The enabled of this UpdateNotificationRuleStepPayload.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateNotificationRuleStepPayload.

        Specifies whether given step will be enabled or not when it is updated.  # noqa: E501

        :param enabled: The enabled of this UpdateNotificationRuleStepPayload.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateNotificationRuleStepPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
