# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TeamRight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'right': 'str',
        'granted': 'bool'
    }

    attribute_map = {
        'right': 'right',
        'granted': 'granted'
    }

    def __init__(self, right=None, granted=None):  # noqa: E501
        """TeamRight - a model defined in Swagger"""  # noqa: E501

        self._right = None
        self._granted = None
        self.discriminator = None

        self.right = right
        if granted is not None:
            self.granted = granted

    @property
    def right(self):
        """Gets the right of this TeamRight.  # noqa: E501


        :return: The right of this TeamRight.  # noqa: E501
        :rtype: str
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this TeamRight.


        :param right: The right of this TeamRight.  # noqa: E501
        :type: str
        """
        if right is None:
            raise ValueError("Invalid value for `right`, must not be `None`")  # noqa: E501

        self._right = right

    @property
    def granted(self):
        """Gets the granted of this TeamRight.  # noqa: E501


        :return: The granted of this TeamRight.  # noqa: E501
        :rtype: bool
        """
        return self._granted

    @granted.setter
    def granted(self, granted):
        """Sets the granted of this TeamRight.


        :param granted: The granted of this TeamRight.  # noqa: E501
        :type: bool
        """

        self._granted = granted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamRight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
