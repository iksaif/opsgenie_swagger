# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from opsgenie_swagger.api_client import ApiClient


class WhoIsOnCallApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_on_call_user(self, identifier, **kwargs):  # noqa: E501
        """Export On-Call User  # noqa: E501

        Exports personal on-call timeline of 3 months to a .ics file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_on_call_user(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the user. Should be either 'id' or 'username' of the user (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_on_call_user_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.export_on_call_user_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def export_on_call_user_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Export On-Call User  # noqa: E501

        Exports personal on-call timeline of 3 months to a .ics file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_on_call_user_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the user. Should be either 'id' or 'username' of the user (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_on_call_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `export_on_call_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/calendar'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/schedules/on-calls/{identifier}.ics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_next_on_calls(self, identifier, **kwargs):  # noqa: E501
        """Get Next On Calls  # noqa: E501

        Gets next on-call participants of a specific schedule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_next_on_calls(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of schedule which could be id or name (required)
        :param str schedule_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
        :param bool flat: Retrieves user names of all on call participants if enabled
        :param datetime date: Starting date of the timeline
        :return: GetNextOnCallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_next_on_calls_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_next_on_calls_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_next_on_calls_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Get Next On Calls  # noqa: E501

        Gets next on-call participants of a specific schedule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_next_on_calls_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of schedule which could be id or name (required)
        :param str schedule_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
        :param bool flat: Retrieves user names of all on call participants if enabled
        :param datetime date: Starting date of the timeline
        :return: GetNextOnCallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'schedule_identifier_type', 'flat', 'date']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_next_on_calls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_next_on_calls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'schedule_identifier_type' in params:
            query_params.append(('scheduleIdentifierType', params['schedule_identifier_type']))  # noqa: E501
        if 'flat' in params:
            query_params.append(('flat', params['flat']))  # noqa: E501
        if 'date' in params:
            query_params.append(('date', params['date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/schedules/{identifier}/next-on-calls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNextOnCallResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_on_calls(self, identifier, **kwargs):  # noqa: E501
        """Get On Calls  # noqa: E501

        Gets current on-call participants of a specific schedule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_on_calls(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of schedule which could be id or name (required)
        :param str schedule_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
        :param bool flat: Retrieves user names of all on call participants if enabled
        :param datetime date: Starting date of the timeline
        :return: GetOnCallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_on_calls_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_on_calls_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_on_calls_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Get On Calls  # noqa: E501

        Gets current on-call participants of a specific schedule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_on_calls_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of schedule which could be id or name (required)
        :param str schedule_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
        :param bool flat: Retrieves user names of all on call participants if enabled
        :param datetime date: Starting date of the timeline
        :return: GetOnCallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'schedule_identifier_type', 'flat', 'date']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_on_calls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_on_calls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'schedule_identifier_type' in params:
            query_params.append(('scheduleIdentifierType', params['schedule_identifier_type']))  # noqa: E501
        if 'flat' in params:
            query_params.append(('flat', params['flat']))  # noqa: E501
        if 'date' in params:
            query_params.append(('date', params['date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/schedules/{identifier}/on-calls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOnCallResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_on_calls(self, **kwargs):  # noqa: E501
        """List On Calls  # noqa: E501

        Lists current on-call participants of all schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_on_calls(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool flat: Retrieves user names of all on call participants if enabled
        :param datetime date: Starting date of the timeline
        :return: ListOnCallsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_on_calls_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_on_calls_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_on_calls_with_http_info(self, **kwargs):  # noqa: E501
        """List On Calls  # noqa: E501

        Lists current on-call participants of all schedules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_on_calls_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool flat: Retrieves user names of all on call participants if enabled
        :param datetime date: Starting date of the timeline
        :return: ListOnCallsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flat', 'date']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_on_calls" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'flat' in params:
            query_params.append(('flat', params['flat']))  # noqa: E501
        if 'date' in params:
            query_params.append(('date', params['date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/schedules/on-calls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOnCallsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
