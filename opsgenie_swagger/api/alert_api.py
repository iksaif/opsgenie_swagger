# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from opsgenie_swagger.api_client import ApiClient


class AlertApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def acknowledge_alert(self, identifier, **kwargs):  # noqa: E501
        """Acknowledge Alert  # noqa: E501

        Acknowledges alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.acknowledge_alert(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param AcknowledgeAlertPayload body: Request payload of acknowledging alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.acknowledge_alert_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.acknowledge_alert_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def acknowledge_alert_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Acknowledge Alert  # noqa: E501

        Acknowledges alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.acknowledge_alert_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param AcknowledgeAlertPayload body: Request payload of acknowledging alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acknowledge_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `acknowledge_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/acknowledge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_attachment(self, identifier, file, **kwargs):  # noqa: E501
        """Add Alert Attachment  # noqa: E501

        Add Alert Attachment to related alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_attachment(identifier, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param file file: Attachment file to be uploaded (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str index_file: Name of html file which will be shown when attachment clicked on UI
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_attachment_with_http_info(identifier, file, **kwargs)  # noqa: E501
        else:
            (data) = self.add_attachment_with_http_info(identifier, file, **kwargs)  # noqa: E501
            return data

    def add_attachment_with_http_info(self, identifier, file, **kwargs):  # noqa: E501
        """Add Alert Attachment  # noqa: E501

        Add Alert Attachment to related alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_attachment_with_http_info(identifier, file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param file file: Attachment file to be uploaded (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str index_file: Name of html file which will be shown when attachment clicked on UI
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'file', 'alert_identifier_type', 'user', 'index_file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `add_attachment`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `add_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'alert_identifier_type' in params:
            query_params.append(('alertIdentifierType', params['alert_identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'index_file' in params:
            form_params.append(('indexFile', params['index_file']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/attachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_details(self, identifier, body, **kwargs):  # noqa: E501
        """Add Details  # noqa: E501

        Add details to the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_details(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddDetailsToAlertPayload body: Request payload of adding alert details action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_details_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_details_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def add_details_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Add Details  # noqa: E501

        Add details to the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_details_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddDetailsToAlertPayload body: Request payload of adding alert details action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `add_details`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_note(self, identifier, body, **kwargs):  # noqa: E501
        """Add Note  # noqa: E501

        Adds note to alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_note(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddNoteToAlertPayload body: Request payload of adding note to alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_note_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_note_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def add_note_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Add Note  # noqa: E501

        Adds note to alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_note_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddNoteToAlertPayload body: Request payload of adding note to alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `add_note`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_responder(self, identifier, body, **kwargs):  # noqa: E501
        """Add Responder  # noqa: E501

        Add responder to alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_responder(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddResponderToAlertPayload body: Request payload of adding responder to alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_responder_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_responder_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def add_responder_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Add Responder  # noqa: E501

        Add responder to alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_responder_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddResponderToAlertPayload body: Request payload of adding responder to alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_responder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `add_responder`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_responder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/responders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_tags(self, identifier, body, **kwargs):  # noqa: E501
        """Add Tags  # noqa: E501

        Add tags to the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_tags(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddTagsToAlertPayload body: Request payload of creating alert tags action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_tags_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tags_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def add_tags_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Add Tags  # noqa: E501

        Add tags to the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_tags_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddTagsToAlertPayload body: Request payload of creating alert tags action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `add_tags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_team(self, identifier, body, **kwargs):  # noqa: E501
        """Add Team  # noqa: E501

        Add team to alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_team(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddTeamToAlertPayload body: Request payload of adding team to alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_team_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_team_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def add_team_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Add Team  # noqa: E501

        Add team to alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_team_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AddTeamToAlertPayload body: Request payload of adding team to alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `add_team`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/teams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_alert(self, identifier, body, **kwargs):  # noqa: E501
        """Assign Alert  # noqa: E501

        Assign alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assign_alert(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AssignAlertPayload body: Request payload of assigning alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assign_alert_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_alert_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def assign_alert_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Assign Alert  # noqa: E501

        Assign alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assign_alert_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param AssignAlertPayload body: Request payload of assigning alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `assign_alert`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def close_alert(self, identifier, **kwargs):  # noqa: E501
        """Close Alert  # noqa: E501

        Closes alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.close_alert(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param CloseAlertPayload body: Request payload of closing alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.close_alert_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.close_alert_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def close_alert_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Close Alert  # noqa: E501

        Closes alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.close_alert_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param CloseAlertPayload body: Request payload of closing alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `close_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/close', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_alert(self, body, **kwargs):  # noqa: E501
        """Create Alert  # noqa: E501

        Creates a new alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_alert(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAlertPayload body: Request payload of created alert (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_alert_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_alert_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_alert_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Alert  # noqa: E501

        Creates a new alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_alert_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAlertPayload body: Request payload of created alert (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_saved_searches(self, body, **kwargs):  # noqa: E501
        """Create Saved Search  # noqa: E501

        Create saved search with given fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_saved_searches(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSavedSearchPayload body: Request payload of creating saved search (required)
        :return: CreateSavedSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_saved_searches_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_saved_searches_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_saved_searches_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Saved Search  # noqa: E501

        Create saved search with given fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_saved_searches_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSavedSearchPayload body: Request payload of creating saved search (required)
        :return: CreateSavedSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_saved_searches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_saved_searches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/saved-searches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSavedSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_alert(self, identifier, **kwargs):  # noqa: E501
        """Delete Alert  # noqa: E501

        Deletes an alert using alert id, tiny id or alias  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_alert(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str source: Display name of the request source
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_alert_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_alert_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def delete_alert_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Delete Alert  # noqa: E501

        Deletes an alert using alert id, tiny id or alias  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_alert_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str source: Display name of the request source
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type', 'user', 'source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `delete_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_saved_search(self, identifier, **kwargs):  # noqa: E501
        """Delete Saved Search  # noqa: E501

        Deletes saved search using given search identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_saved_search(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the saved search which could be 'id' or 'name' (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_saved_search_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_saved_search_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def delete_saved_search_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Delete Saved Search  # noqa: E501

        Deletes saved search using given search identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_saved_search_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the saved search which could be 'id' or 'name' (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_saved_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `delete_saved_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/saved-searches/{identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def escalate_alert(self, identifier, body, **kwargs):  # noqa: E501
        """Escalate Alert  # noqa: E501

        Escalate alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.escalate_alert(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param EscalateAlertToNextPayload body: Request payload of escalating alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.escalate_alert_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.escalate_alert_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def escalate_alert_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Escalate Alert  # noqa: E501

        Escalate alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.escalate_alert_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param EscalateAlertToNextPayload body: Request payload of escalating alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method escalate_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `escalate_alert`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `escalate_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/escalate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_custom_alert_action(self, identifier, action_name, **kwargs):  # noqa: E501
        """Custom Alert Action  # noqa: E501

        Custom actions for the alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.execute_custom_alert_action(identifier, action_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str action_name: Name of the action to execute (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param ExecuteCustomAlertActionPayload body: Request payload of executing custom alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.execute_custom_alert_action_with_http_info(identifier, action_name, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_custom_alert_action_with_http_info(identifier, action_name, **kwargs)  # noqa: E501
            return data

    def execute_custom_alert_action_with_http_info(self, identifier, action_name, **kwargs):  # noqa: E501
        """Custom Alert Action  # noqa: E501

        Custom actions for the alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.execute_custom_alert_action_with_http_info(identifier, action_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str action_name: Name of the action to execute (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param ExecuteCustomAlertActionPayload body: Request payload of executing custom alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'action_name', 'identifier_type', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_custom_alert_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `execute_custom_alert_action`")  # noqa: E501
        # verify the required parameter 'action_name' is set
        if ('action_name' not in params or
                params['action_name'] is None):
            raise ValueError("Missing the required parameter `action_name` when calling `execute_custom_alert_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501
        if 'action_name' in params:
            path_params['actionName'] = params['action_name']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/actions/{actionName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert(self, identifier, **kwargs):  # noqa: E501
        """Get Alert  # noqa: E501

        Returns alert with given id, tiny id or alias  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alert(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: GetAlertResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_alert_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_alert_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Get Alert  # noqa: E501

        Returns alert with given id, tiny id or alias  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alert_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: GetAlertResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAlertResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attachment(self, identifier, attachment_id, **kwargs):  # noqa: E501
        """Get Alert Attachment  # noqa: E501

        Get alert attachment name and url for the given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_attachment(identifier, attachment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param int attachment_id: Identifier of alert attachment (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: GetAlertAttachmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_attachment_with_http_info(identifier, attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attachment_with_http_info(identifier, attachment_id, **kwargs)  # noqa: E501
            return data

    def get_attachment_with_http_info(self, identifier, attachment_id, **kwargs):  # noqa: E501
        """Get Alert Attachment  # noqa: E501

        Get alert attachment name and url for the given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_attachment_with_http_info(identifier, attachment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param int attachment_id: Identifier of alert attachment (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: GetAlertAttachmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'attachment_id', 'alert_identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `get_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501

        query_params = []
        if 'alert_identifier_type' in params:
            query_params.append(('alertIdentifierType', params['alert_identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/attachments/{attachmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAlertAttachmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_request_status(self, request_id, **kwargs):  # noqa: E501
        """Get Request Status of Alert  # noqa: E501

        Used to track the status and alert details (if any) of the request whose identifier is given  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_request_status(request_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str request_id: Universally unique identifier of the questioned request (required)
        :return: GetRequestStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_request_status_with_http_info(request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_request_status_with_http_info(request_id, **kwargs)  # noqa: E501
            return data

    def get_request_status_with_http_info(self, request_id, **kwargs):  # noqa: E501
        """Get Request Status of Alert  # noqa: E501

        Used to track the status and alert details (if any) of the request whose identifier is given  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_request_status_with_http_info(request_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str request_id: Universally unique identifier of the questioned request (required)
        :return: GetRequestStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_request_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `get_request_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/requests/{requestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRequestStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_saved_search(self, identifier, **kwargs):  # noqa: E501
        """Get Saved Search  # noqa: E501

        Get saved search for the given search identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_saved_search(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the saved search which could be 'id' or 'name' (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'
        :return: GetSavedSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_saved_search_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_saved_search_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_saved_search_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Get Saved Search  # noqa: E501

        Get saved search for the given search identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_saved_search_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the saved search which could be 'id' or 'name' (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'
        :return: GetSavedSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_saved_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_saved_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/saved-searches/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSavedSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_alerts(self, **kwargs):  # noqa: E501
        """List Alerts  # noqa: E501

        Returns list of alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_alerts(async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: Search query to apply while filtering the alerts
        :param str search_identifier: Identifier of the saved search query to apply while filtering the alerts
        :param str search_identifier_type: Identifier type of the saved search query. Possible values are 'id', or 'name'
        :param int offset: Start index of the result set (to apply pagination). Minimum value (and also default value) is 0
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str sort: Name of the field that result set will be sorted by
        :param str order: Sorting order of the result set
        :return: ListAlertsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_alerts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_alerts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_alerts_with_http_info(self, **kwargs):  # noqa: E501
        """List Alerts  # noqa: E501

        Returns list of alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_alerts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: Search query to apply while filtering the alerts
        :param str search_identifier: Identifier of the saved search query to apply while filtering the alerts
        :param str search_identifier_type: Identifier type of the saved search query. Possible values are 'id', or 'name'
        :param int offset: Start index of the result set (to apply pagination). Minimum value (and also default value) is 0
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str sort: Name of the field that result set will be sorted by
        :param str order: Sorting order of the result set
        :return: ListAlertsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'search_identifier', 'search_identifier_type', 'offset', 'limit', 'sort', 'order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_alerts" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `list_alerts`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_alerts`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_alerts`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'search_identifier' in params:
            query_params.append(('searchIdentifier', params['search_identifier']))  # noqa: E501
        if 'search_identifier_type' in params:
            query_params.append(('searchIdentifierType', params['search_identifier_type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAlertsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_attachments(self, identifier, **kwargs):  # noqa: E501
        """List Alert Attachments  # noqa: E501

        List alert attachment names and urls for related alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_attachments(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: ListAlertAttachmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_attachments_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.list_attachments_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def list_attachments_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """List Alert Attachments  # noqa: E501

        List alert attachment names and urls for related alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_attachments_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: ListAlertAttachmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'alert_identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'alert_identifier_type' in params:
            query_params.append(('alertIdentifierType', params['alert_identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAlertAttachmentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_logs(self, identifier, **kwargs):  # noqa: E501
        """List Alert Logs  # noqa: E501

        List alert logs for the given alert identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_logs(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str offset: Starting value of the offset property
        :param str direction: Page direction to apply for the given offset with 'next' and 'prev'
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str order: Sorting order of the result set
        :return: ListAlertLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_logs_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.list_logs_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def list_logs_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """List Alert Logs  # noqa: E501

        List alert logs for the given alert identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_logs_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str offset: Starting value of the offset property
        :param str direction: Page direction to apply for the given offset with 'next' and 'prev'
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str order: Sorting order of the result set
        :return: ListAlertLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type', 'offset', 'direction', 'limit', 'order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_logs`")  # noqa: E501

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_logs`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_logs`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAlertLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_notes(self, identifier, **kwargs):  # noqa: E501
        """List Alert Notes  # noqa: E501

        List alert notes for the given alert identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_notes(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str offset: Starting value of the offset property
        :param str direction: Page direction to apply for the given offset with 'next' and 'prev'
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str order: Sorting order of the result set
        :return: ListAlertNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_notes_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.list_notes_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def list_notes_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """List Alert Notes  # noqa: E501

        List alert notes for the given alert identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_notes_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str offset: Starting value of the offset property
        :param str direction: Page direction to apply for the given offset with 'next' and 'prev'
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str order: Sorting order of the result set
        :return: ListAlertNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type', 'offset', 'direction', 'limit', 'order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_notes`")  # noqa: E501

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_notes`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_notes`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAlertNotesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_recipients(self, identifier, **kwargs):  # noqa: E501
        """List Alert Recipients  # noqa: E501

        List alert recipients for the given alert identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_recipients(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: ListAlertRecipientsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_recipients_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.list_recipients_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def list_recipients_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """List Alert Recipients  # noqa: E501

        List alert recipients for the given alert identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_recipients_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: ListAlertRecipientsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_recipients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_recipients`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAlertRecipientsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_saved_searches(self, **kwargs):  # noqa: E501
        """Lists Saved Searches  # noqa: E501

        List all saved searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_saved_searches(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ListSavedSearchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_saved_searches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_saved_searches_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_saved_searches_with_http_info(self, **kwargs):  # noqa: E501
        """Lists Saved Searches  # noqa: E501

        List all saved searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_saved_searches_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ListSavedSearchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_saved_searches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/saved-searches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListSavedSearchesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_attachment(self, identifier, attachment_id, **kwargs):  # noqa: E501
        """Remove Alert Attachment  # noqa: E501

        Remove alert attachment for the given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_attachment(identifier, attachment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param int attachment_id: Identifier of alert attachment (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_attachment_with_http_info(identifier, attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_attachment_with_http_info(identifier, attachment_id, **kwargs)  # noqa: E501
            return data

    def remove_attachment_with_http_info(self, identifier, attachment_id, **kwargs):  # noqa: E501
        """Remove Alert Attachment  # noqa: E501

        Remove alert attachment for the given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_attachment_with_http_info(identifier, attachment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param int attachment_id: Identifier of alert attachment (required)
        :param str alert_identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'attachment_id', 'alert_identifier_type', 'user']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `remove_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `remove_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501

        query_params = []
        if 'alert_identifier_type' in params:
            query_params.append(('alertIdentifierType', params['alert_identifier_type']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/attachments/{attachmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_details(self, identifier, keys, **kwargs):  # noqa: E501
        """Remove Details  # noqa: E501

        Remove details of the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_details(identifier, keys, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param list[str] keys: Comma separated list of keys to remove from the custom properties of the alert (e.g. 'key1,key2') (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str note: Additional alert note to add
        :param str source: Display name of the request source
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_details_with_http_info(identifier, keys, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_details_with_http_info(identifier, keys, **kwargs)  # noqa: E501
            return data

    def remove_details_with_http_info(self, identifier, keys, **kwargs):  # noqa: E501
        """Remove Details  # noqa: E501

        Remove details of the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_details_with_http_info(identifier, keys, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param list[str] keys: Comma separated list of keys to remove from the custom properties of the alert (e.g. 'key1,key2') (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str note: Additional alert note to add
        :param str source: Display name of the request source
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'keys', 'identifier_type', 'user', 'note', 'source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `remove_details`")  # noqa: E501
        # verify the required parameter 'keys' is set
        if ('keys' not in params or
                params['keys'] is None):
            raise ValueError("Missing the required parameter `keys` when calling `remove_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'note' in params:
            query_params.append(('note', params['note']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'keys' in params:
            query_params.append(('keys', params['keys']))  # noqa: E501
            collection_formats['keys'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/details', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tags(self, identifier, tags, **kwargs):  # noqa: E501
        """Remove Tags  # noqa: E501

        Remove tags of the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_tags(identifier, tags, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param list[str] tags: Tags field of the given alert as comma seperated values (e.g. 'tag1, tag2') (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str note: Additional alert note to add
        :param str source: Display name of the request source
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_tags_with_http_info(identifier, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tags_with_http_info(identifier, tags, **kwargs)  # noqa: E501
            return data

    def remove_tags_with_http_info(self, identifier, tags, **kwargs):  # noqa: E501
        """Remove Tags  # noqa: E501

        Remove tags of the alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_tags_with_http_info(identifier, tags, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param list[str] tags: Tags field of the given alert as comma seperated values (e.g. 'tag1, tag2') (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param str user: Display name of the request owner
        :param str note: Additional alert note to add
        :param str source: Display name of the request source
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'tags', 'identifier_type', 'user', 'note', 'source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `remove_tags`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `remove_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'note' in params:
            query_params.append(('note', params['note']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
            collection_formats['tags'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snooze_alert(self, identifier, body, **kwargs):  # noqa: E501
        """Snooze Alert  # noqa: E501

        Snooze alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.snooze_alert(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param SnoozeAlertPayload body: Request payload of snoozing alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.snooze_alert_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.snooze_alert_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def snooze_alert_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Snooze Alert  # noqa: E501

        Snooze alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.snooze_alert_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param SnoozeAlertPayload body: Request payload of snoozing alert action (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snooze_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `snooze_alert`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `snooze_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/snooze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def un_acknowledge_alert(self, identifier, **kwargs):  # noqa: E501
        """UnAcknowledge Alert  # noqa: E501

        UnAcknowledge alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.un_acknowledge_alert(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param UnAcknowledgeAlertPayload body: Request payload of unacknowledging alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.un_acknowledge_alert_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.un_acknowledge_alert_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def un_acknowledge_alert_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """UnAcknowledge Alert  # noqa: E501

        UnAcknowledge alert with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.un_acknowledge_alert_with_http_info(identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of alert which could be alert id, tiny id or alert alias (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
        :param UnAcknowledgeAlertPayload body: Request payload of unacknowledging alert action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'identifier_type', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method un_acknowledge_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `un_acknowledge_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in params:
            query_params.append(('identifierType', params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/alerts/{identifier}/unacknowledge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
