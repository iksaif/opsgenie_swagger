# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from opsgenie_swagger.api_client import ApiClient


class TeamMemberApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_team_member(self, identifier, body, **kwargs):  # noqa: E501
        """Add Team Member  # noqa: E501

        Adds a member to team with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_team_member(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the team (required)
        :param AddTeamMemberPayload body: Request payload of added team member (required)
        :param str team_identifier_type: Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_team_member_with_http_info(identifier, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_team_member_with_http_info(identifier, body, **kwargs)  # noqa: E501
            return data

    def add_team_member_with_http_info(self, identifier, body, **kwargs):  # noqa: E501
        """Add Team Member  # noqa: E501

        Adds a member to team with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_team_member_with_http_info(identifier, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the team (required)
        :param AddTeamMemberPayload body: Request payload of added team member (required)
        :param str team_identifier_type: Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'body', 'team_identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_team_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `add_team_member`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_team_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'team_identifier_type' in params:
            query_params.append(('teamIdentifierType', params['team_identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/teams/{identifier}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_team_member(self, identifier, member_identifier, **kwargs):  # noqa: E501
        """Delete Team Member  # noqa: E501

        Deletes the member of team with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_team_member(identifier, member_identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the team (required)
        :param str member_identifier: User id or username of member for removal (required)
        :param str team_identifier_type: Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_team_member_with_http_info(identifier, member_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_team_member_with_http_info(identifier, member_identifier, **kwargs)  # noqa: E501
            return data

    def delete_team_member_with_http_info(self, identifier, member_identifier, **kwargs):  # noqa: E501
        """Delete Team Member  # noqa: E501

        Deletes the member of team with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_team_member_with_http_info(identifier, member_identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str identifier: Identifier of the team (required)
        :param str member_identifier: User id or username of member for removal (required)
        :param str team_identifier_type: Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'member_identifier', 'team_identifier_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_team_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `delete_team_member`")  # noqa: E501
        # verify the required parameter 'member_identifier' is set
        if ('member_identifier' not in params or
                params['member_identifier'] is None):
            raise ValueError("Missing the required parameter `member_identifier` when calling `delete_team_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501
        if 'member_identifier' in params:
            path_params['memberIdentifier'] = params['member_identifier']  # noqa: E501

        query_params = []
        if 'team_identifier_type' in params:
            query_params.append(('teamIdentifierType', params['team_identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/teams/{identifier}/members/{memberIdentifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
